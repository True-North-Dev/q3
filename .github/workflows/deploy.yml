name: Build and Push to ECR

on:
  push:
    branches:
      - main
      - staging
    tags:
      - 'v*.*.*'

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Determine environment and fetch credentials from SSM
        run: |
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)

          if [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            ENV=staging
            TAG=staging
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENV=prod
            TAG=latest
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            ENV=prod
            TAG="${GITHUB_REF#refs/tags/}"
          else
            echo "Unsupported branch/tag: ${{ github.ref }}"
            exit 1
          fi

          echo "tag=$TAG" >> $GITHUB_ENV
          echo "env=$ENV" >> $GITHUB_ENV
          echo "sha=$SHORT_SHA" >> $GITHUB_ENV

          DB_URL=$(aws ssm get-parameter --name "/q3/$ENV/DB_URL" --with-decryption --query "Parameter.Value" --output text)
          SECRET_KEY_BASE=$(aws ssm get-parameter --name "/q3/$ENV/SECRET_KEY_BASE" --with-decryption --query "Parameter.Value" --output text)

          echo "DB_URL=$DB_URL" >> $GITHUB_ENV
          echo "SECRET_KEY_BASE=$SECRET_KEY_BASE" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:${{ env.tag }} .

      - name: Print staging credentials (debug only)
        run: |
          echo "DB_URL=$DB_URL"
          echo "SECRET_KEY_BASE=$SECRET_KEY_BASE"

      - name: Debug tag and env
        run: |
          echo "ENV=${{ env.env }}"
          echo "TAG=${{ env.tag }}"
          echo "SHA=${{ env.sha }}"


      - name: Tag image for ECR
        run: |
          BASE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}
          
          docker tag ${{ secrets.ECR_REPOSITORY }}:${{ env.tag }} $BASE:${{ env.sha }}
          docker tag ${{ secrets.ECR_REPOSITORY }}:${{ env.tag }} $BASE:${{ env.tag }}

      - name: Push image to ECR
        run: |
          BASE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}
          
          docker push $BASE:${{ env.tag }}
          docker push $BASE:${{ env.sha }}

      # - name: Submit AWS Batch staging job
      #   if: github.ref == 'refs/heads/staging'
      #   run: |
      #     JOB_NAME=q3-staging-${{ github.run_id }}
      #     QUEUE_NAME=q3-staging-queue
      #     JOB_DEF_NAME=q3-job-staging

      #     echo "Submitting AWS Batch job: $JOB_NAME"
          
      #     aws batch submit-job \
      #       --job-name "$JOB_NAME" \
      #       --job-queue "$QUEUE_NAME" \
      #       --job-definition "$JOB_DEF_NAME" \
      #       --container-overrides '{
      #         "environment": [
      #           { "name": "DB_URL", "value": "'"${{ env.DB_URL }}"'" },
      #           { "name": "SECRET_KEY_BASE", "value": "'"${{ env.SECRET_KEY_BASE }}"'" }
      #         ]
      #       }'
